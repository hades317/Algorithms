#include <bits/stdc++.h>
using namespace std;
const int N = 1e5 + 5;
bool visited[N];
vector<int> graph[N];
vector<int> result(N);
int dfs(int j, int i) {
    visited[i] = true;
    for (int x = 0; x < (int)graph[i].size(); x++) {
        if (!visited[graph[i][x]])
            j = dfs(j, graph[i][x]);
    }
    result[j] = i;
    return j - 1;
}
void topological_sort(int n) {
    int j = n - 1;
    for (int i = 1; i < n + 1; i++) {
        if (!visited[i])
            j = dfs(j, i);
    }
}
void solve() {
    int n, m;
    cin >> n >> m;
    memset(visited, false, sizeof(visited));
    for (int i = 0; i < m; i++) {
        int x, y;
        cin >> x >> y;
        graph[x].push_back(y);
    }
    topological_sort(n);
    for (int i = 0; i < n; i++) {
        cout << result[i] << " ";
    }
}
int32_t main() {
    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    solve();
    return 0;
}
